{"ast":null,"code":"var _jsxFileName = \"/Users/lukehilliard/Desktop/Full Stack CA2/NODEJS-ONLY/client/src/components/AddAddress.js\";\nimport React, { Component } from \"react\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport NavBar from \"./NavBar\";\nimport LinkInClass from \"./LinkInClass\";\nimport axios from \"axios\";\nimport { SERVER_HOST } from \"../config/global_constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class AddAddress extends Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n    this.handleSubmit = e => {\n      let isNameValid = this.validateName();\n      let isEmailValid = this.validateEmail();\n      let isPasswordValid = this.validatePassword();\n      let isConfirmPasswordValid = this.validateConfirmPassword();\n      let formData = new FormData();\n      formData.append(\"profilePhoto\", this.state.selectedFile);\n      if (!isNameValid && !isEmailValid && !isPasswordValid && !isConfirmPasswordValid)\n        // if inputs have passed validation\n        {\n          e.preventDefault();\n          axios.post(`${SERVER_HOST}/users/Login/Register/${this.state.name}/${this.state.email}/${this.state.password}`, formData, {\n            headers: {\n              \"Content-type\": \"multipart/form-data\"\n            }\n          }).then(res => {\n            if (res.data) {\n              if (res.data.errorMessage) {\n                console.log(res.data.errorMessage);\n              } else\n                // user successfully registered\n                {\n                  console.log(\"User registered and logged in\");\n                  localStorage.name = res.data.name;\n                  localStorage.accessLevel = res.data.accessLevel;\n                  localStorage.profilePhoto = res.data.profilePhoto;\n                  localStorage.token = res.data.token;\n                  this.setState({\n                    isRegistered: true\n                  });\n                }\n            } else {\n              console.log(\"Registration failed\");\n            }\n          });\n        } else {\n        console.log(\"Current values have not been posted\");\n      }\n      // console.log(this.validateName())\n      // console.log(this.state.errors.name)\n      // console.log(this.state.errors.email)\n      // console.log(this.state.errors.password)\n      // console.log(this.state.errors.confirmPassword)\n    };\n    this.state = {\n      name: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      isRegistered: false,\n      errors: {\n        // used to keep track of current validation errors\n        name: [],\n        email: [],\n        password: [],\n        confirmPassword: []\n      }\n    };\n  }\n  // Client side validation for Registration page\n  // if all of these return true the data will be posted\n  validateName() {\n    const name = this.state.name;\n    const errors = [];\n    if (/\\d/.test(name)) {\n      errors.push(\"Name cannot contain numbers\");\n    }\n    if (/[!\"£_'$*^&()+=#.-]/.test(name)) {\n      errors.push(\"Name cannot contain special characters\");\n    }\n    if (!name.trim()) {\n      errors.push(\"Name cannot be empty\");\n    }\n\n    // update the state of name within errors with the current errors\n    this.setState(prevState => ({\n      errors: {\n        ...prevState.errors,\n        name: errors\n      }\n    }));\n    //console.log(\"Errors for name: \", errors)\n    return errors.length !== 0;\n  }\n  validateEmail() {\n    const pattern = /^[a-zA-Z0-9_.-]+@[a-zA-Z]+.[a-zA-Z]+$/;\n    const email = this.state.email;\n    const errors = [];\n    if (!email.trim()) {\n      errors.push(\"Email cannot be empty\");\n    }\n    if (!pattern.test(email) && email.trim()) {\n      errors.push(\"Invalid email format\");\n    }\n\n    // update the state of email within errors with the current errors\n    this.setState(prevState => ({\n      errors: {\n        ...prevState.errors,\n        email: errors\n      }\n    }));\n    //console.log(\"Errors for email: \", errors)\n    return errors.length !== 0;\n  }\n  validatePassword() {\n    const specialCharPattern = /[!£_\"$*^&()+=#.-]/;\n    const password = this.state.password;\n    const errors = [];\n    if (password.length < 8) {\n      errors.push(\"Password must be > 8 characters long\");\n    }\n    if (!/[0-9]/.test(password)) {\n      errors.push(\"Password must contain at least 1 number \");\n    }\n    if (!specialCharPattern.test(password)) {\n      errors.push(\"Password must contain at least 1 special character !£_$*^&()+=#.-\");\n    }\n\n    // update the state of password within errors with the current errors\n    this.setState(prevState => ({\n      errors: {\n        ...prevState.errors,\n        password: errors\n      }\n    }));\n    //console.log(\"Errors for password: \", errors)\n    return errors.length !== 0;\n  }\n  validateConfirmPassword() {\n    const errors = [];\n    if (this.state.password !== this.state.confirmPassword) {\n      errors.push(\"Passwords do not match\");\n    }\n\n    // update the state of confirmPassword within errors with current errors\n    this.setState(prevState => ({\n      errors: {\n        ...prevState.errors,\n        confirmPassword: errors\n      }\n    }));\n\n    //console.log(\"Errors for confirmPassword: \", errors)\n    return errors.length !== 0;\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"register-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Registration\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"register-form\",\n        noValidate: true,\n        id: \"loginOrRegistrationForm\",\n        children: [this.state.isRegistered ? /*#__PURE__*/_jsxDEV(Redirect, {\n          to: \"/TestingDirectory\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 48\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"name\",\n          type: \"text\",\n          placeholder: \"Name\",\n          autoComplete: \"name\",\n          value: this.state.name,\n          onChange: this.handleChange,\n          ref: input => {\n            this.inputToFocus = input;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 21\n        }, this), this.state.errors.name.length > 0 && this.state.errors.name.map((error, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-message\",\n          children: [\"\\u2022 \", error]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 25\n        }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"email\",\n          type: \"email\",\n          placeholder: \"Email\",\n          autoComplete: \"email\",\n          value: this.state.email,\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 21\n        }, this), this.state.errors.email.length > 0 && this.state.errors.email.map((error, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-message\",\n          children: [\"\\u2022 \", error]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 25\n        }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"password\",\n          type: \"password\",\n          placeholder: \"Password\",\n          autoComplete: \"password\",\n          value: this.state.password,\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 21\n        }, this), this.state.errors.password.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"password-error-container\",\n          children: this.state.errors.password.map((error, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"\\u2022 \", error]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 25\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"confirmPassword\",\n          type: \"password\",\n          placeholder: \"Confirm password\",\n          autoComplete: \"confirmPassword\",\n          value: this.state.confirmPassword,\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: this.handleFileChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 21\n        }, this), this.state.errors.confirmPassword.length > 0 && this.state.errors.confirmPassword.map((error, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-message\",\n          children: [\"\\u2022 \", error]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 25\n        }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 26\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"register-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(LinkInClass, {\n            value: \"Register New User\",\n            className: \"green-button\",\n            onClick: this.handleSubmit\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 25\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 120\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            className: \"red-button\",\n            to: \"/TestingDirectory\",\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","Link","Redirect","NavBar","LinkInClass","axios","SERVER_HOST","jsxDEV","_jsxDEV","AddAddress","constructor","props","handleChange","e","setState","target","name","value","handleSubmit","isNameValid","validateName","isEmailValid","validateEmail","isPasswordValid","validatePassword","isConfirmPasswordValid","validateConfirmPassword","formData","FormData","append","state","selectedFile","preventDefault","post","email","password","headers","then","res","data","errorMessage","console","log","localStorage","accessLevel","profilePhoto","token","isRegistered","confirmPassword","errors","test","push","trim","prevState","length","pattern","specialCharPattern","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","noValidate","id","to","type","placeholder","autoComplete","onChange","ref","input","inputToFocus","map","error","index","handleFileChange","onClick"],"sources":["/Users/lukehilliard/Desktop/Full Stack CA2/NODEJS-ONLY/client/src/components/AddAddress.js"],"sourcesContent":["import React, {Component} from \"react\";\nimport {Link, Redirect} from \"react-router-dom\";\nimport NavBar from \"./NavBar\";\nimport LinkInClass from \"./LinkInClass\";\nimport axios from \"axios\";\nimport {SERVER_HOST} from \"../config/global_constants\";\n\nexport default class AddAddress extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state={\n            name:\"\",\n            email:\"\",\n            password:\"\",\n            confirmPassword:\"\",\n            isRegistered:false,\n            errors: { // used to keep track of current validation errors\n                name: [],\n                email: [],\n                password: [],\n                confirmPassword: []\n            }\n        }\n    }\n    handleChange = (e) =>\n    {\n        this.setState({[e.target.name]: e.target.value})\n    }\n\n\n    // Client side validation for Registration page\n    // if all of these return true the data will be posted\n    validateName()\n    {\n        const name = this.state.name\n        const errors = [];\n\n\n        if(/\\d/.test(name)) {\n            errors.push(\"Name cannot contain numbers\")\n        }\n        if(/[!\"£_'$*^&()+=#.-]/.test(name)) {\n            errors.push(\"Name cannot contain special characters\")\n        }\n        if(!name.trim()) {\n            errors.push(\"Name cannot be empty\")\n        }\n\n        // update the state of name within errors with the current errors\n        this.setState(prevState => ({\n            errors: {\n                ...prevState.errors,\n                name: errors\n            }\n        }))\n        //console.log(\"Errors for name: \", errors)\n        return errors.length !== 0\n    }\n    validateEmail()\n    {\n        const pattern = /^[a-zA-Z0-9_.-]+@[a-zA-Z]+.[a-zA-Z]+$/\n        const email = this.state.email\n        const errors = []\n\n\n        if(!email.trim()) {\n            errors.push(\"Email cannot be empty\")\n        }\n        if(!pattern.test(email) && email.trim()) {\n            errors.push(\"Invalid email format\")\n        }\n\n        // update the state of email within errors with the current errors\n        this.setState(prevState => ({\n            errors: {\n                ...prevState.errors,\n                email: errors\n            }\n        }))\n        //console.log(\"Errors for email: \", errors)\n        return errors.length !== 0\n    }\n    validatePassword()\n    {\n        const specialCharPattern = /[!£_\"$*^&()+=#.-]/\n        const password = this.state.password\n        const errors = []\n\n\n        if(password.length < 8) {\n            errors.push(\"Password must be > 8 characters long\")\n        }\n        if(!/[0-9]/.test(password)) {\n            errors.push(\"Password must contain at least 1 number \")\n        }\n        if(!specialCharPattern.test(password)) {\n            errors.push(\"Password must contain at least 1 special character !£_$*^&()+=#.-\")\n        }\n\n        // update the state of password within errors with the current errors\n        this.setState(prevState => ({\n            errors: {\n                ...prevState.errors,\n                password: errors\n            }\n        }))\n        //console.log(\"Errors for password: \", errors)\n        return errors.length !== 0\n    }\n    validateConfirmPassword()\n    {\n        const errors = []\n\n\n        if(this.state.password !== this.state.confirmPassword) {\n            errors.push(\"Passwords do not match\")\n        }\n\n        // update the state of confirmPassword within errors with current errors\n        this.setState(prevState => ({\n            errors: {\n                ...prevState.errors,\n                confirmPassword: errors\n            }\n        }))\n\n        //console.log(\"Errors for confirmPassword: \", errors)\n        return errors.length !== 0\n    }\n\n    handleSubmit=(e)=> {\n        let isNameValid = this.validateName()\n        let isEmailValid = this.validateEmail()\n        let isPasswordValid = this.validatePassword()\n        let isConfirmPasswordValid = this.validateConfirmPassword()\n        let formData=new FormData()\n        formData.append(\"profilePhoto\",this.state.selectedFile)\n        if(!isNameValid && !isEmailValid && !isPasswordValid && !isConfirmPasswordValid) // if inputs have passed validation\n        {\n            e.preventDefault()\n\n            axios.post(`${SERVER_HOST}/users/Login/Register/${this.state.name}/${this.state.email}/${this.state.password}`,formData, {headers: {\"Content-type\": \"multipart/form-data\"}})\n                .then(res =>\n                {\n                    if(res.data)\n                    {\n                        if (res.data.errorMessage)\n                        {\n                            console.log(res.data.errorMessage)\n                        }\n                        else // user successfully registered\n                        {\n                            console.log(\"User registered and logged in\")\n\n                            localStorage.name = res.data.name\n                            localStorage.accessLevel = res.data.accessLevel\n                            localStorage.profilePhoto=res.data.profilePhoto\n                            localStorage.token=res.data.token\n                            this.setState({isRegistered:true})\n                        }\n\n                    }else{\n                        console.log(\"Registration failed\")\n                    }\n                })\n        } else {\n\n            console.log(\"Current values have not been posted\")\n        }\n        // console.log(this.validateName())\n        // console.log(this.state.errors.name)\n        // console.log(this.state.errors.email)\n        // console.log(this.state.errors.password)\n        // console.log(this.state.errors.confirmPassword)\n\n    }\n    render(){\n        return(\n            <div className=\"register-container\">\n                <h2>Registration</h2>\n\n                <form className=\"register-form\" noValidate = {true} id = \"loginOrRegistrationForm\">\n                    {this.state.isRegistered ? <Redirect to=\"/TestingDirectory\"/> : null}\n\n                    {/*  &#x2022; == unicode for bullet point  */}\n                    <input\n                        name = \"name\"\n                        type = \"text\"\n                        placeholder = \"Name\"\n                        autoComplete=\"name\"\n                        value = {this.state.name}\n                        onChange = {this.handleChange}\n                        ref = {(input) => { this.inputToFocus = input }}\n                    />\n                    {this.state.errors.name.length > 0 && this.state.errors.name.map((error, index) => (\n                        <div key={index} className=\"error-message\">\n                            &#x2022; {error}\n                        </div>\n                    ))}\n                    <br/>\n\n                    <input\n                        name = \"email\"\n                        type = \"email\"\n                        placeholder = \"Email\"\n                        autoComplete=\"email\"\n                        value = {this.state.email}\n                        onChange = {this.handleChange}\n                    />\n                    {this.state.errors.email.length > 0 && this.state.errors.email.map((error, index) => (\n                        <div key={index} className=\"error-message\">\n                            &#x2022; {error}\n                        </div>\n                    ))}\n                    <br/>\n\n                    <input\n                        name = \"password\"\n                        type = \"password\"\n                        placeholder = \"Password\"\n                        autoComplete=\"password\"\n                        value = {this.state.password}\n                        onChange = {this.handleChange}\n                    />\n                    {this.state.errors.password.length > 0 ? (\n                        <div className=\"password-error-container\">\n                            {this.state.errors.password.map((error, index) => (\n                                <div key={index}>\n                                    &#x2022; {error}\n                                </div>\n                            ))}\n                        </div>\n                    ) : null}\n\n                    <br/>\n\n                    <input\n                        name = \"confirmPassword\"\n                        type = \"password\"\n                        placeholder = \"Confirm password\"\n                        autoComplete=\"confirmPassword\"\n                        value = {this.state.confirmPassword}\n                        onChange = {this.handleChange}\n                    />\n                    <input type=\"file\" onChange={this.handleFileChange}/>\n\n                    {this.state.errors.confirmPassword.length > 0 && this.state.errors.confirmPassword.map((error, index) => (\n                        <div key={index} className=\"error-message\">\n                            &#x2022; {error}\n                        </div>\n                    ))}\n                    <br/><br/>\n\n                    <div className=\"register-buttons\">\n                        <LinkInClass value=\"Register New User\" className=\"green-button\" onClick={this.handleSubmit} /> <br/>\n                        <Link className=\"red-button\" to={\"/TestingDirectory\"}>Cancel</Link>\n                    </div>\n                </form>\n            </div>\n\n\n\n        )}\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}