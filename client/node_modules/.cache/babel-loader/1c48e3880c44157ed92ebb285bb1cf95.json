{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\jamie\\\\Desktop\\\\CA2\\\\NODEJS-ONLY\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\jamie\\\\Desktop\\\\CA2\\\\NODEJS-ONLY\\\\client\\\\src\\\\components\\\\Login\\\\Register.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport { Redirect, Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { ACCESS_LEVEL_ADMIN, SERVER_HOST } from \"../../config/global_constants\";\nimport LinkInClass from \"../LinkInClass\";\nexport default class Register extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.handleSubmit = e => {\n      let isNameValid = this.validateName();\n      let isEmailValid = this.validateEmail();\n      let isPasswordValid = this.validatePassword();\n      let isConfirmPasswordValid = this.validateConfirmPassword();\n\n      if (!isNameValid && !isEmailValid && !isPasswordValid && !isConfirmPasswordValid) // if inputs have passed validation\n        {\n          e.preventDefault();\n          axios.post(\"\".concat(SERVER_HOST, \"/users/Login/Register/\").concat(this.state.name, \"/\").concat(this.state.email, \"/\").concat(this.state.password)).then(res => {\n            if (res.data) {\n              if (res.data.errorMessage) {\n                console.log(res.data.errorMessage);\n              } else // user successfully registered\n                {\n                  console.log(\"User registered and logged in\");\n\n                  if (this.state.name === \"Admin\") {\n                    res.data.accessLevel = ACCESS_LEVEL_ADMIN;\n                    console.log(res.data.accessLevel);\n                  }\n\n                  localStorage.name = res.data.name;\n                  localStorage.accessLevel = res.data.accessLevel;\n                  console.log(\"Other Storage= \" + localStorage.accessLevel);\n                  localStorage.token = res.data.token;\n                  this.setState({\n                    isRegistered: true\n                  });\n                }\n            } else {\n              console.log(\"Registration failed\");\n            }\n          });\n        } else {\n        console.log(\"Current values have not been posted\");\n      } // console.log(this.validateName())\n      // console.log(this.state.errors.name)\n      // console.log(this.state.errors.email)\n      // console.log(this.state.errors.password)\n      // console.log(this.state.errors.confirmPassword)\n\n    };\n\n    this.state = {\n      name: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      isRegistered: false,\n      errors: {\n        // used to keep track of current validation errors\n        name: [],\n        email: [],\n        password: [],\n        confirmPassword: []\n      }\n    };\n  }\n\n  // Client side validation for Registration page\n  // if all of these return true the data will be posted\n  validateName() {\n    const name = this.state.name;\n    const errors = [];\n\n    if (/\\d/.test(name)) {\n      errors.push(\"Name cannot contain numbers\");\n    }\n\n    if (/[!\"£_'$*^&()+=#.-]/.test(name)) {\n      errors.push(\"Name cannot contain special characters\");\n    }\n\n    if (!name.trim()) {\n      errors.push(\"Name cannot be empty\");\n    } // update the state of name within errors with the current errors\n\n\n    this.setState(prevState => ({\n      errors: _objectSpread({}, prevState.errors, {\n        name: errors\n      })\n    })); //console.log(\"Errors for name: \", errors)\n\n    return errors.length !== 0;\n  }\n\n  validateEmail() {\n    const pattern = /^[a-zA-Z0-9_.-]+@[a-zA-Z]+.[a-zA-Z]+$/;\n    const email = this.state.email;\n    const errors = [];\n\n    if (!email.trim()) {\n      errors.push(\"Email cannot be empty\");\n    }\n\n    if (!pattern.test(email) && email.trim()) {\n      errors.push(\"Invalid email format\");\n    } // update the state of email within errors with the current errors\n\n\n    this.setState(prevState => ({\n      errors: _objectSpread({}, prevState.errors, {\n        email: errors\n      })\n    })); //console.log(\"Errors for email: \", errors)\n\n    return errors.length !== 0;\n  }\n\n  validatePassword() {\n    const specialCharPattern = /[!£_\"$*^&()+=#.-]/;\n    const password = this.state.password;\n    const errors = [];\n\n    if (password.length < 8) {\n      errors.push(\"Password must be > 8 characters long\");\n    }\n\n    if (!/[0-9]/.test(password)) {\n      errors.push(\"Password must contain at least 1 number \");\n    }\n\n    if (!specialCharPattern.test(password)) {\n      errors.push(\"Password must contain at least 1 special character !£_$*^&()+=#.-\");\n    } // update the state of password within errors with the current errors\n\n\n    this.setState(prevState => ({\n      errors: _objectSpread({}, prevState.errors, {\n        password: errors\n      })\n    })); //console.log(\"Errors for password: \", errors)\n\n    return errors.length !== 0;\n  }\n\n  validateConfirmPassword() {\n    const errors = [];\n\n    if (this.state.password !== this.state.confirmPassword) {\n      errors.push(\"Passwords do not match\");\n    } // update the state of confirmPassword within errors with current errors\n\n\n    this.setState(prevState => ({\n      errors: _objectSpread({}, prevState.errors, {\n        confirmPassword: errors\n      })\n    })); //console.log(\"Errors for confirmPassword: \", errors)\n\n    return errors.length !== 0;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"register-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, \"Registration\"), React.createElement(\"form\", {\n      className: \"register-form\",\n      noValidate: true,\n      id: \"loginOrRegistrationForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, this.state.isRegistered ? React.createElement(Redirect, {\n      to: \"/TestingDirectory\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }) : null, React.createElement(\"input\", {\n      name: \"name\",\n      type: \"text\",\n      placeholder: \"Name\",\n      autoComplete: \"name\",\n      value: this.state.name,\n      onChange: this.handleChange,\n      ref: input => {\n        this.inputToFocus = input;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }), this.state.errors.name.length > 0 && this.state.errors.name.map((error, index) => React.createElement(\"div\", {\n      key: index,\n      className: \"error-message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, \"\\u2022 \", error)), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      name: \"email\",\n      type: \"email\",\n      placeholder: \"Email\",\n      autoComplete: \"email\",\n      value: this.state.email,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }), this.state.errors.email.length > 0 && this.state.errors.email.map((error, index) => React.createElement(\"div\", {\n      key: index,\n      className: \"error-message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, \"\\u2022 \", error)), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      name: \"password\",\n      type: \"password\",\n      placeholder: \"Password\",\n      autoComplete: \"password\",\n      value: this.state.password,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }), this.state.errors.password.length > 0 ? React.createElement(\"div\", {\n      className: \"password-error-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, this.state.errors.password.map((error, index) => React.createElement(\"div\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, \"\\u2022 \", error))) : null, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      name: \"confirmPassword\",\n      type: \"password\",\n      placeholder: \"Confirm password\",\n      autoComplete: \"confirmPassword\",\n      value: this.state.confirmPassword,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }), this.state.errors.confirmPassword.length > 0 && this.state.errors.confirmPassword.map((error, index) => React.createElement(\"div\", {\n      key: index,\n      className: \"error-message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, \"\\u2022 \", error)), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"register-buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, React.createElement(LinkInClass, {\n      value: \"Register New User\",\n      className: \"green-button\",\n      onClick: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }), \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }), React.createElement(Link, {\n      className: \"red-button\",\n      to: \"/TestingDirectory\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, \"Cancel\"))));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\jamie\\Desktop\\CA2\\NODEJS-ONLY\\client\\src\\components\\Login\\Register.js"],"names":["React","Component","Redirect","Link","axios","ACCESS_LEVEL_ADMIN","SERVER_HOST","LinkInClass","Register","constructor","props","handleChange","e","setState","target","name","value","handleSubmit","isNameValid","validateName","isEmailValid","validateEmail","isPasswordValid","validatePassword","isConfirmPasswordValid","validateConfirmPassword","preventDefault","post","state","email","password","then","res","data","errorMessage","console","log","accessLevel","localStorage","token","isRegistered","confirmPassword","errors","test","push","trim","prevState","length","pattern","specialCharPattern","render","input","inputToFocus","map","error","index"],"mappings":"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","sourcesContent":["import React,{Component} from \"react\"\r\nimport {Redirect, Link} from \"react-router-dom\"\r\nimport axios from \"axios\"\r\nimport {ACCESS_LEVEL_ADMIN, SERVER_HOST} from \"../../config/global_constants\"\r\nimport LinkInClass from \"../LinkInClass\";\r\nexport default class Register extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            name:\"\",\r\n            email:\"\",\r\n            password:\"\",\r\n            confirmPassword:\"\",\r\n            isRegistered:false,\r\n            errors: { // used to keep track of current validation errors\r\n                name: [],\r\n                email: [],\r\n                password: [],\r\n                confirmPassword: []\r\n            }\r\n        }\r\n    }\r\n    handleChange = (e) =>\r\n    {\r\n        this.setState({[e.target.name]: e.target.value})\r\n    }\r\n\r\n    // Client side validation for Registration page\r\n    // if all of these return true the data will be posted\r\n    validateName()\r\n    {\r\n        const name = this.state.name\r\n        const errors = [];\r\n\r\n\r\n        if(/\\d/.test(name)) {\r\n            errors.push(\"Name cannot contain numbers\")\r\n        }\r\n        if(/[!\"£_'$*^&()+=#.-]/.test(name)) {\r\n            errors.push(\"Name cannot contain special characters\")\r\n        }\r\n        if(!name.trim()) {\r\n            errors.push(\"Name cannot be empty\")\r\n        }\r\n\r\n        // update the state of name within errors with the current errors\r\n        this.setState(prevState => ({\r\n            errors: {\r\n                ...prevState.errors,\r\n                name: errors\r\n            }\r\n        }))\r\n        //console.log(\"Errors for name: \", errors)\r\n        return errors.length !== 0\r\n    }\r\n    validateEmail()\r\n    {\r\n        const pattern = /^[a-zA-Z0-9_.-]+@[a-zA-Z]+.[a-zA-Z]+$/\r\n        const email = this.state.email\r\n        const errors = []\r\n\r\n\r\n        if(!email.trim()) {\r\n            errors.push(\"Email cannot be empty\")\r\n        }\r\n        if(!pattern.test(email) && email.trim()) {\r\n            errors.push(\"Invalid email format\")\r\n        }\r\n\r\n        // update the state of email within errors with the current errors\r\n        this.setState(prevState => ({\r\n            errors: {\r\n                ...prevState.errors,\r\n                email: errors\r\n            }\r\n        }))\r\n        //console.log(\"Errors for email: \", errors)\r\n        return errors.length !== 0\r\n    }\r\n    validatePassword()\r\n    {\r\n        const specialCharPattern = /[!£_\"$*^&()+=#.-]/\r\n        const password = this.state.password\r\n        const errors = []\r\n\r\n\r\n        if(password.length < 8) {\r\n            errors.push(\"Password must be > 8 characters long\")\r\n        }\r\n        if(!/[0-9]/.test(password)) {\r\n            errors.push(\"Password must contain at least 1 number \")\r\n        }\r\n        if(!specialCharPattern.test(password)) {\r\n            errors.push(\"Password must contain at least 1 special character !£_$*^&()+=#.-\")\r\n        }\r\n\r\n        // update the state of password within errors with the current errors\r\n        this.setState(prevState => ({\r\n            errors: {\r\n                ...prevState.errors,\r\n                password: errors\r\n            }\r\n        }))\r\n        //console.log(\"Errors for password: \", errors)\r\n        return errors.length !== 0\r\n    }\r\n    validateConfirmPassword()\r\n    {\r\n        const errors = []\r\n\r\n\r\n        if(this.state.password !== this.state.confirmPassword) {\r\n            errors.push(\"Passwords do not match\")\r\n        }\r\n\r\n        // update the state of confirmPassword within errors with current errors\r\n        this.setState(prevState => ({\r\n            errors: {\r\n                ...prevState.errors,\r\n                confirmPassword: errors\r\n            }\r\n        }))\r\n\r\n        //console.log(\"Errors for confirmPassword: \", errors)\r\n        return errors.length !== 0\r\n    }\r\n\r\n    handleSubmit=(e)=> {\r\n        let isNameValid = this.validateName()\r\n        let isEmailValid = this.validateEmail()\r\n        let isPasswordValid = this.validatePassword()\r\n        let isConfirmPasswordValid = this.validateConfirmPassword()\r\n        if(!isNameValid && !isEmailValid && !isPasswordValid && !isConfirmPasswordValid) // if inputs have passed validation\r\n        {\r\n            e.preventDefault()\r\n\r\n            axios.post(`${SERVER_HOST}/users/Login/Register/${this.state.name}/${this.state.email}/${this.state.password}`)\r\n                .then(res =>\r\n                {\r\n                    if(res.data)\r\n                    {\r\n                        if (res.data.errorMessage)\r\n                        {\r\n                            console.log(res.data.errorMessage)\r\n                        }\r\n                        else // user successfully registered\r\n                        {\r\n                            console.log(\"User registered and logged in\")\r\n                            if (this.state.name===\"Admin\"){\r\n                                res.data.accessLevel=ACCESS_LEVEL_ADMIN\r\n                                console.log(res.data.accessLevel)\r\n                            }\r\n                            localStorage.name = res.data.name\r\n                            localStorage.accessLevel = res.data.accessLevel\r\n                            console.log(\"Other Storage= \"+localStorage.accessLevel)\r\n                            localStorage.token=res.data.token\r\n                            this.setState({isRegistered:true})\r\n                        }\r\n\r\n                    }else{\r\n                        console.log(\"Registration failed\")\r\n                    }\r\n                })\r\n        } else {\r\n\r\n            console.log(\"Current values have not been posted\")\r\n        }\r\n        // console.log(this.validateName())\r\n        // console.log(this.state.errors.name)\r\n        // console.log(this.state.errors.email)\r\n        // console.log(this.state.errors.password)\r\n        // console.log(this.state.errors.confirmPassword)\r\n\r\n    }\r\nrender(){\r\n        return(\r\n            <div className=\"register-container\">\r\n                <h2>Registration</h2>\r\n\r\n                    <form className=\"register-form\" noValidate = {true} id = \"loginOrRegistrationForm\">\r\n                        {this.state.isRegistered ? <Redirect to=\"/TestingDirectory\"/> : null}\r\n\r\n                        {/*  &#x2022; == unicode for bullet point  */}\r\n                        <input\r\n                            name = \"name\"\r\n                            type = \"text\"\r\n                            placeholder = \"Name\"\r\n                            autoComplete=\"name\"\r\n                            value = {this.state.name}\r\n                            onChange = {this.handleChange}\r\n                            ref = {(input) => { this.inputToFocus = input }}\r\n                        />\r\n                        {this.state.errors.name.length > 0 && this.state.errors.name.map((error, index) => (\r\n                            <div key={index} className=\"error-message\">\r\n                                &#x2022; {error}\r\n                            </div>\r\n                        ))}\r\n                        <br/>\r\n\r\n                        <input\r\n                            name = \"email\"\r\n                            type = \"email\"\r\n                            placeholder = \"Email\"\r\n                            autoComplete=\"email\"\r\n                            value = {this.state.email}\r\n                            onChange = {this.handleChange}\r\n                        />\r\n                        {this.state.errors.email.length > 0 && this.state.errors.email.map((error, index) => (\r\n                            <div key={index} className=\"error-message\">\r\n                                &#x2022; {error}\r\n                            </div>\r\n                        ))}\r\n                        <br/>\r\n\r\n                        <input\r\n                            name = \"password\"\r\n                            type = \"password\"\r\n                            placeholder = \"Password\"\r\n                            autoComplete=\"password\"\r\n                            value = {this.state.password}\r\n                            onChange = {this.handleChange}\r\n                        />\r\n                        {this.state.errors.password.length > 0 ? (\r\n                            <div className=\"password-error-container\">\r\n                                {this.state.errors.password.map((error, index) => (\r\n                                    <div key={index}>\r\n                                        &#x2022; {error}\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                        ) : null}\r\n\r\n                        <br/>\r\n\r\n                        <input\r\n                            name = \"confirmPassword\"\r\n                            type = \"password\"\r\n                            placeholder = \"Confirm password\"\r\n                            autoComplete=\"confirmPassword\"\r\n                            value = {this.state.confirmPassword}\r\n                            onChange = {this.handleChange}\r\n                        />\r\n\r\n                        {this.state.errors.confirmPassword.length > 0 && this.state.errors.confirmPassword.map((error, index) => (\r\n                            <div key={index} className=\"error-message\">\r\n                                &#x2022; {error}\r\n                            </div>\r\n                        ))}\r\n                        <br/><br/>\r\n\r\n                        <div className=\"register-buttons\">\r\n                            <LinkInClass value=\"Register New User\" className=\"green-button\" onClick={this.handleSubmit} /> <br/>\r\n                            <Link className=\"red-button\" to={\"/TestingDirectory\"}>Cancel</Link>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n\r\n\r\n\r\n        )}\r\n}"]},"metadata":{},"sourceType":"module"}