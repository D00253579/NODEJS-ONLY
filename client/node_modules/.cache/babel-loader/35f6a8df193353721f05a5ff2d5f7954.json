{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\caitl\\\\Desktop\\\\CA2_FullStack\\\\NODEJS-ONLY\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\caitl\\\\Desktop\\\\CA2_FullStack\\\\NODEJS-ONLY\\\\client\\\\src\\\\components\\\\Login\\\\Register.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport { Redirect, Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { ACCESS_LEVEL_ADMIN, SERVER_HOST } from \"../../config/global_constants\";\nimport LinkInClass from \"../LinkInClass\";\nimport NavBar from \"../NavBar\";\nimport Footer from \"../Footer\";\nexport default class Register extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.handleFileChange = e => {\n      this.setState({\n        selectedFile: e.target.files[0]\n      });\n    };\n\n    this.handleSubmit = e => {\n      let isNameValid = this.validateName();\n      let isEmailValid = this.validateEmail();\n      let isPasswordValid = this.validatePassword();\n      let isConfirmPasswordValid = this.validateConfirmPassword();\n      let formData = new FormData();\n      formData.append(\"profilePhoto\", this.state.selectedFile);\n\n      if (!isNameValid && !isEmailValid && !isPasswordValid && !isConfirmPasswordValid) // if inputs have passed validation\n        {\n          e.preventDefault();\n          axios.post(\"\".concat(SERVER_HOST, \"/users/Login/Register/\").concat(this.state.name, \"/\").concat(this.state.email, \"/\").concat(this.state.password), formData, {\n            headers: {\n              \"Content-type\": \"multipart/form-data\"\n            }\n          }).then(res => {\n            if (res.data) {\n              if (res.data.errorMessage) {\n                console.log(res.data.errorMessage);\n              } else // user successfully registered\n                {\n                  console.log(\"User registered and logged in\");\n                  localStorage.name = res.data.name;\n                  localStorage.accessLevel = res.data.accessLevel;\n                  localStorage.profilePhoto = res.data.profilePhoto;\n                  localStorage.token = res.data.token;\n                  this.setState({\n                    isRegistered: true\n                  });\n                }\n            } else {\n              console.log(\"Registration failed\");\n            }\n          });\n        } else {\n        console.log(\"Current values have not been posted\");\n      } // console.log(this.validateName())\n      // console.log(this.state.errors.name)\n      // console.log(this.state.errors.email)\n      // console.log(this.state.errors.password)\n      // console.log(this.state.errors.confirmPassword)\n\n    };\n\n    this.state = {\n      name: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      isRegistered: false,\n      selectedFile: null,\n      errors: {\n        // used to keep track of current validation errors\n        name: [],\n        email: [],\n        password: [],\n        confirmPassword: []\n      }\n    };\n  }\n\n  // Client side validation for Registration page\n  // if all of these return true the data will be posted\n  validateName() {\n    const name = this.state.name;\n    const errors = [];\n\n    if (/\\d/.test(name)) {\n      errors.push(\"Name cannot contain numbers\");\n    }\n\n    if (/[!\"£_'$*^&()+=#.-]/.test(name)) {\n      errors.push(\"Name cannot contain special characters\");\n    }\n\n    if (!name.trim()) {\n      errors.push(\"Name cannot be empty\");\n    } // update the state of name within errors with the current errors\n\n\n    this.setState(prevState => ({\n      errors: _objectSpread({}, prevState.errors, {\n        name: errors\n      })\n    })); //console.log(\"Errors for name: \", errors)\n\n    return errors.length !== 0;\n  }\n\n  validateEmail() {\n    const pattern = /^[a-zA-Z0-9_.-]+@[a-zA-Z]+.[a-zA-Z]+$/;\n    const email = this.state.email;\n    const errors = [];\n\n    if (!email.trim()) {\n      errors.push(\"Email cannot be empty\");\n    }\n\n    if (!pattern.test(email) && email.trim()) {\n      errors.push(\"Invalid email format\");\n    } // update the state of email within errors with the current errors\n\n\n    this.setState(prevState => ({\n      errors: _objectSpread({}, prevState.errors, {\n        email: errors\n      })\n    })); //console.log(\"Errors for email: \", errors)\n\n    return errors.length !== 0;\n  }\n\n  validatePassword() {\n    const specialCharPattern = /[!£_\"$*^&()+=#.-]/;\n    const password = this.state.password;\n    const errors = [];\n\n    if (password.length < 8) {\n      errors.push(\"Password must be > 8 characters long\");\n    }\n\n    if (!/[0-9]/.test(password)) {\n      errors.push(\"Password must contain at least 1 number \");\n    }\n\n    if (!specialCharPattern.test(password)) {\n      errors.push(\"Password must contain at least 1 special character !£_$*^&()+=#.-\");\n    } // update the state of password within errors with the current errors\n\n\n    this.setState(prevState => ({\n      errors: _objectSpread({}, prevState.errors, {\n        password: errors\n      })\n    })); //console.log(\"Errors for password: \", errors)\n\n    return errors.length !== 0;\n  }\n\n  validateConfirmPassword() {\n    const errors = [];\n\n    if (this.state.password !== this.state.confirmPassword) {\n      errors.push(\"Passwords do not match\");\n    } // update the state of confirmPassword within errors with current errors\n\n\n    this.setState(prevState => ({\n      errors: _objectSpread({}, prevState.errors, {\n        confirmPassword: errors\n      })\n    })); //console.log(\"Errors for confirmPassword: \", errors)\n\n    return errors.length !== 0;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"register-head-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(NavBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"register-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"register-page-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, \"CREATE YOUR ACCOUNT\"), React.createElement(\"form\", {\n      className: \"register-form\",\n      noValidate: true,\n      id: \"loginOrRegistrationForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, this.state.isRegistered ? React.createElement(Redirect, {\n      to: \"/TestingDirectory\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }) : null, React.createElement(\"div\", {\n      className: \"register-section1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, \"Name:\", React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, \" *\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      name: \"name\",\n      type: \"text\",\n      placeholder: \"Name\",\n      autoComplete: \"name\",\n      value: this.state.name,\n      onChange: this.handleChange,\n      ref: input => {\n        this.inputToFocus = input;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }), this.state.errors.name.length > 0 && this.state.errors.name.map((error, index) => React.createElement(\"div\", {\n      key: index,\n      className: \"error-message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, \"\\u2022 \", error)), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, \"Email Address:\", React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, \" *\"), \" \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      name: \"email\",\n      type: \"email\",\n      placeholder: \"Email\",\n      autoComplete: \"email\",\n      value: this.state.email,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }), this.state.errors.email.length > 0 && this.state.errors.email.map((error, index) => React.createElement(\"div\", {\n      key: index,\n      className: \"error-message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, \"\\u2022 \", error)), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"vl\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"register-section2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, \"Password:\", React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, \" *\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      name: \"password\",\n      type: \"password\",\n      placeholder: \"Password\",\n      autoComplete: \"password\",\n      value: this.state.password,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }), this.state.errors.password.length > 0 ? React.createElement(\"div\", {\n      className: \"password-error-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, this.state.errors.password.map((error, index) => React.createElement(\"div\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, \"\\u2022 \", error))) : null, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, \"Confirm Password:\", React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, \" *\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      name: \"confirmPassword\",\n      type: \"password\",\n      placeholder: \"Confirm password\",\n      autoComplete: \"confirmPassword\",\n      value: this.state.confirmPassword,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"select-profile-image\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, \"Add a Profile Picture: \"), React.createElement(\"input\", {\n      type: \"file\",\n      onChange: this.handleFileChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }), this.state.errors.confirmPassword.length > 0 && this.state.errors.confirmPassword.map((error, index) => React.createElement(\"div\", {\n      key: index,\n      className: \"error-message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }, \"\\u2022 \", error)), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"register-buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }, React.createElement(LinkInClass, {\n      value: \"Register\",\n      type: \"button\",\n      className: \"submit-btn\",\n      onClick: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }), \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }), React.createElement(Link, {\n      to: \"/AccountPage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"cancel-btn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, \"Cancel\")))))), React.createElement(\"footer\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }, React.createElement(Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\caitl\\Desktop\\CA2_FullStack\\NODEJS-ONLY\\client\\src\\components\\Login\\Register.js"],"names":["React","Component","Redirect","Link","axios","ACCESS_LEVEL_ADMIN","SERVER_HOST","LinkInClass","NavBar","Footer","Register","constructor","props","handleChange","e","setState","target","name","value","handleFileChange","selectedFile","files","handleSubmit","isNameValid","validateName","isEmailValid","validateEmail","isPasswordValid","validatePassword","isConfirmPasswordValid","validateConfirmPassword","formData","FormData","append","state","preventDefault","post","email","password","headers","then","res","data","errorMessage","console","log","localStorage","accessLevel","profilePhoto","token","isRegistered","confirmPassword","errors","test","push","trim","prevState","length","pattern","specialCharPattern","render","input","inputToFocus","map","error","index"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\"\r\nimport {Redirect, Link} from \"react-router-dom\"\r\nimport axios from \"axios\"\r\nimport {ACCESS_LEVEL_ADMIN, SERVER_HOST} from \"../../config/global_constants\"\r\nimport LinkInClass from \"../LinkInClass\";\r\nimport NavBar from \"../NavBar\";\r\nimport Footer from \"../Footer\";\r\n\r\nexport default class Register extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: \"\",\r\n            email: \"\",\r\n            password: \"\",\r\n            confirmPassword: \"\",\r\n            isRegistered: false,\r\n            selectedFile: null,\r\n            errors: { // used to keep track of current validation errors\r\n                name: [],\r\n                email: [],\r\n                password: [],\r\n                confirmPassword: []\r\n            }\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({[e.target.name]: e.target.value})\r\n    }\r\n    handleFileChange = (e) => {\r\n        this.setState({selectedFile: e.target.files[0]})\r\n    }\r\n\r\n    // Client side validation for Registration page\r\n    // if all of these return true the data will be posted\r\n    validateName() {\r\n        const name = this.state.name\r\n        const errors = [];\r\n\r\n\r\n        if (/\\d/.test(name)) {\r\n            errors.push(\"Name cannot contain numbers\")\r\n        }\r\n        if (/[!\"£_'$*^&()+=#.-]/.test(name)) {\r\n            errors.push(\"Name cannot contain special characters\")\r\n        }\r\n        if (!name.trim()) {\r\n            errors.push(\"Name cannot be empty\")\r\n        }\r\n\r\n        // update the state of name within errors with the current errors\r\n        this.setState(prevState => ({\r\n            errors: {\r\n                ...prevState.errors,\r\n                name: errors\r\n            }\r\n        }))\r\n        //console.log(\"Errors for name: \", errors)\r\n        return errors.length !== 0\r\n    }\r\n\r\n    validateEmail() {\r\n        const pattern = /^[a-zA-Z0-9_.-]+@[a-zA-Z]+.[a-zA-Z]+$/\r\n        const email = this.state.email\r\n        const errors = []\r\n\r\n\r\n        if (!email.trim()) {\r\n            errors.push(\"Email cannot be empty\")\r\n        }\r\n        if (!pattern.test(email) && email.trim()) {\r\n            errors.push(\"Invalid email format\")\r\n        }\r\n\r\n        // update the state of email within errors with the current errors\r\n        this.setState(prevState => ({\r\n            errors: {\r\n                ...prevState.errors,\r\n                email: errors\r\n            }\r\n        }))\r\n        //console.log(\"Errors for email: \", errors)\r\n        return errors.length !== 0\r\n    }\r\n\r\n    validatePassword() {\r\n        const specialCharPattern = /[!£_\"$*^&()+=#.-]/\r\n        const password = this.state.password\r\n        const errors = []\r\n\r\n\r\n        if (password.length < 8) {\r\n            errors.push(\"Password must be > 8 characters long\")\r\n        }\r\n        if (!/[0-9]/.test(password)) {\r\n            errors.push(\"Password must contain at least 1 number \")\r\n        }\r\n        if (!specialCharPattern.test(password)) {\r\n            errors.push(\"Password must contain at least 1 special character !£_$*^&()+=#.-\")\r\n        }\r\n\r\n        // update the state of password within errors with the current errors\r\n        this.setState(prevState => ({\r\n            errors: {\r\n                ...prevState.errors,\r\n                password: errors\r\n            }\r\n        }))\r\n        //console.log(\"Errors for password: \", errors)\r\n        return errors.length !== 0\r\n    }\r\n\r\n    validateConfirmPassword() {\r\n        const errors = []\r\n\r\n\r\n        if (this.state.password !== this.state.confirmPassword) {\r\n            errors.push(\"Passwords do not match\")\r\n        }\r\n\r\n        // update the state of confirmPassword within errors with current errors\r\n        this.setState(prevState => ({\r\n            errors: {\r\n                ...prevState.errors,\r\n                confirmPassword: errors\r\n            }\r\n        }))\r\n\r\n        //console.log(\"Errors for confirmPassword: \", errors)\r\n        return errors.length !== 0\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        let isNameValid = this.validateName()\r\n        let isEmailValid = this.validateEmail()\r\n        let isPasswordValid = this.validatePassword()\r\n        let isConfirmPasswordValid = this.validateConfirmPassword()\r\n        let formData = new FormData()\r\n        formData.append(\"profilePhoto\", this.state.selectedFile)\r\n        if (!isNameValid && !isEmailValid && !isPasswordValid && !isConfirmPasswordValid) // if inputs have passed validation\r\n        {\r\n            e.preventDefault()\r\n\r\n            axios.post(`${SERVER_HOST}/users/Login/Register/${this.state.name}/${this.state.email}/${this.state.password}`, formData, {headers: {\"Content-type\": \"multipart/form-data\"}})\r\n                .then(res => {\r\n                    if (res.data) {\r\n                        if (res.data.errorMessage) {\r\n                            console.log(res.data.errorMessage)\r\n                        } else // user successfully registered\r\n                        {\r\n                            console.log(\"User registered and logged in\")\r\n\r\n                            localStorage.name = res.data.name\r\n                            localStorage.accessLevel = res.data.accessLevel\r\n                            localStorage.profilePhoto = res.data.profilePhoto\r\n                            localStorage.token = res.data.token\r\n                            this.setState({isRegistered: true})\r\n                        }\r\n\r\n                    } else {\r\n                        console.log(\"Registration failed\")\r\n                    }\r\n                })\r\n        } else {\r\n\r\n            console.log(\"Current values have not been posted\")\r\n        }\r\n        // console.log(this.validateName())\r\n        // console.log(this.state.errors.name)\r\n        // console.log(this.state.errors.email)\r\n        // console.log(this.state.errors.password)\r\n        // console.log(this.state.errors.confirmPassword)\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"register-head-container\">\r\n                    <NavBar/>\r\n                </div>\r\n                <div className=\"register-container\">\r\n                    <div className=\"register-page-box\">\r\n                        <h1>CREATE YOUR ACCOUNT</h1>\r\n\r\n                        <form className=\"register-form\" noValidate={true} id=\"loginOrRegistrationForm\">\r\n                            {this.state.isRegistered ? <Redirect to=\"/TestingDirectory\"/> : null}\r\n\r\n                            {/*  &#x2022; == unicode for bullet point  */}\r\n                            <div className={\"register-section1\"}>\r\n                                <label>Name:<span> *</span></label><br/>\r\n                                <input\r\n                                    name=\"name\"\r\n                                    type=\"text\"\r\n                                    placeholder=\"Name\"\r\n                                    autoComplete=\"name\"\r\n                                    value={this.state.name}\r\n                                    onChange={this.handleChange}\r\n                                    ref={(input) => {\r\n                                        this.inputToFocus = input\r\n                                    }}\r\n                                />\r\n                                {this.state.errors.name.length > 0 && this.state.errors.name.map((error, index) => (\r\n                                    <div key={index} className=\"error-message\">\r\n                                        &#x2022; {error}\r\n                                    </div>\r\n                                ))}\r\n                                <br/>\r\n\r\n                                <label>Email Address:<span> *</span> </label><br/>\r\n                                <input\r\n                                    name=\"email\"\r\n                                    type=\"email\"\r\n                                    placeholder=\"Email\"\r\n                                    autoComplete=\"email\"\r\n                                    value={this.state.email}\r\n                                    onChange={this.handleChange}\r\n                                />\r\n                                {this.state.errors.email.length > 0 && this.state.errors.email.map((error, index) => (\r\n                                    <div key={index} className=\"error-message\">\r\n                                        &#x2022; {error}\r\n                                    </div>\r\n                                ))}\r\n                                <br/>\r\n                            </div>\r\n                            <div className=\"vl\"></div>\r\n                            <div className={\"register-section2\"}>\r\n                                <label>Password:<span> *</span></label><br/>\r\n                                <input\r\n                                    name=\"password\"\r\n                                    type=\"password\"\r\n                                    placeholder=\"Password\"\r\n                                    autoComplete=\"password\"\r\n                                    value={this.state.password}\r\n                                    onChange={this.handleChange}\r\n                                />\r\n                                {this.state.errors.password.length > 0 ? (\r\n                                    <div className=\"password-error-container\">\r\n                                        {this.state.errors.password.map((error, index) => (\r\n                                            <div key={index}>\r\n                                                &#x2022; {error}\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                ) : null}\r\n\r\n                                <br/>\r\n\r\n                                <label>Confirm Password:<span> *</span></label><br/>\r\n                                <input\r\n                                    name=\"confirmPassword\"\r\n                                    type=\"password\"\r\n                                    placeholder=\"Confirm password\"\r\n                                    autoComplete=\"confirmPassword\"\r\n                                    value={this.state.confirmPassword}\r\n                                    onChange={this.handleChange}\r\n                                />\r\n                                <div className={\"select-profile-image\"}>\r\n                                    <label>Add a Profile Picture: </label>\r\n                                    <input type=\"file\" onChange={this.handleFileChange}/>\r\n                                </div>\r\n                                <br/>\r\n                                {this.state.errors.confirmPassword.length > 0 && this.state.errors.confirmPassword.map((error, index) => (\r\n                                    <div key={index} className=\"error-message\">\r\n                                        &#x2022; {error}\r\n                                    </div>\r\n                                ))}\r\n                                <br/><br/>\r\n                            </div>\r\n                            <div className=\"register-buttons\">\r\n                                <LinkInClass value=\"Register\" type=\"button\" className=\"submit-btn\" onClick={this.handleSubmit}/> <br/>\r\n                                <Link to={\"/AccountPage\"}>\r\n                                    <button className={\"cancel-btn\"}>\r\n                                        Cancel\r\n                                    </button>\r\n                                </Link>\r\n                                {/*<Link className=\"red-button\" to={\"/AccountPage\"}>Cancel</Link>*/}\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n                <footer>\r\n                    <Footer/>\r\n                </footer>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}