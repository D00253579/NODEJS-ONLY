{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\caitl\\\\Desktop\\\\CA2_FullStack\\\\NODEJS-ONLY\\\\client\\\\src\\\\components\\\\AdminDashboard\\\\AdminTable.js\";\nimport React, { Component } from \"react\";\nimport AdminTableRow from \"./AdminTableRow\";\nexport default class AdminTable extends Component {\n  constructor(props) {\n    super(props);\n\n    this.sortName = () => {\n      // default descending\n      let products = [...this.props.products]; // soft copy of products to manipulate\n      // sort ascending\n\n      if (!this.state.nameIsAscending) {\n        let ascendingProducts = products.sort((a, b) => a.name < b.name ? 1 : -1);\n        this.props.updateProducts(ascendingProducts);\n        console.log(\"Name ACE: \", ascendingProducts); // sort descending\n      } else {\n        let descendingProducts = products.sort((a, b) => a.name < b.name ? -1 : 1);\n        this.props.updateProducts(descendingProducts);\n        console.log(\"Name DESC: \", descendingProducts);\n      } // When the sort is clicked depending on what the previous order was this will set it to its opposite to change the direction of the arrow\n\n\n      if (!this.state.nameIsAscending) {\n        this.setState({\n          nameIsAscending: true\n        });\n      } else {\n        this.setState({\n          nameIsAscending: false\n        });\n      } // reset other arrows to default\n\n\n      if (!this.state.priceIsAscending || !this.state.stockIsAscending) {\n        this.setState({\n          priceIsAscending: true\n        });\n        this.setState({\n          stockIsAscending: true\n        });\n      }\n    };\n\n    this.sortPrice = () => {\n      // default ascending\n      let products = [...this.props.products]; // sort ascending\n\n      if (this.state.priceIsAscending) {\n        let ascendingProducts = products.sort((a, b) => a.price < b.price ? 1 : -1);\n        this.props.updateProducts(ascendingProducts); //console.log(\"Price ACE: \", ascendingProducts)\n        // sort descending\n      } else {\n        let descendingProducts = products.sort((a, b) => a.price < b.price ? -1 : 1);\n        this.props.updateProducts(descendingProducts); //console.log(\"Price DESC: \",descendingProducts)\n      } // Update arrow direction\n\n\n      if (this.state.priceIsAscending) {\n        this.setState({\n          priceIsAscending: false\n        });\n      } else {\n        this.setState({\n          priceIsAscending: true\n        });\n      } // reset other arrows to default\n\n\n      if (!this.state.nameIsAscending || !this.state.stockIsAscending) {\n        this.setState({\n          nameIsAscending: true\n        });\n        this.setState({\n          stockIsAscending: true\n        });\n      }\n    };\n\n    this.sortStock = () => {\n      // default ascending\n      let products = [...this.props.products]; // sort ascending\n\n      if (this.state.stockIsAscending) {\n        let ascendingProducts = products.sort((a, b) => a.current_stock < b.current_stock ? 1 : -1);\n        this.props.updateProducts(ascendingProducts); //console.log(\"Stock ACE: \", ascendingProducts)\n        // sort descending\n      } else {\n        let descendingProducts = products.sort((a, b) => a.current_stock < b.current_stock ? -1 : 1);\n        this.props.updateProducts(descendingProducts); //console.log(\"Stock DESC: \", descendingProducts)\n      } // Update arrow direction\n\n\n      if (this.state.stockIsAscending) {\n        this.setState({\n          stockIsAscending: false\n        });\n      } else {\n        this.setState({\n          stockIsAscending: true\n        });\n      } // reset other arrows to default\n\n\n      if (!this.state.nameIsAscending || !this.state.priceIsAscending) {\n        this.setState({\n          nameIsAscending: true\n        });\n        this.setState({\n          priceIsAscending: true\n        });\n      }\n    };\n\n    this.state = {\n      nameIsAscending: false,\n      // default name descending\n      priceIsAscending: true,\n      stockIsAscending: true\n    };\n  }\n\n  render() {\n    return React.createElement(\"table\", {\n      className: \"admin-table\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Inventory Number\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"Name \", React.createElement(\"label\", {\n      className: \"sortLabel\",\n      onClick: this.sortName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      id: \"nameSort\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, !this.state.nameIsAscending ? '\\u25B4' : '\\u25BE', \" \"))), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"Brand\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"Category\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Price \", React.createElement(\"label\", {\n      className: \"sortLabel\",\n      onClick: this.sortPrice,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      id: \"priceSort\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, !this.state.priceIsAscending ? '\\u25B4' : '\\u25BE'))), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"Stock \", React.createElement(\"label\", {\n      className: \"sortLabel\",\n      onClick: this.sortStock,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      id: \"stockSort\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, !this.state.stockIsAscending ? '\\u25B4' : '\\u25BE'))), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"P. Code\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, this.props.products.map((product, index) => React.createElement(AdminTableRow, {\n      key: product._id,\n      product: product,\n      rowNum: index + 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }))));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\caitl\\Desktop\\CA2_FullStack\\NODEJS-ONLY\\client\\src\\components\\AdminDashboard\\AdminTable.js"],"names":["React","Component","AdminTableRow","AdminTable","constructor","props","sortName","products","state","nameIsAscending","ascendingProducts","sort","a","b","name","updateProducts","console","log","descendingProducts","setState","priceIsAscending","stockIsAscending","sortPrice","price","sortStock","current_stock","render","map","product","index","_id"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\"\r\nimport AdminTableRow from \"./AdminTableRow\";\r\n\r\nexport default class AdminTable extends Component\r\n{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nameIsAscending: false, // default name descending\r\n            priceIsAscending: true,\r\n            stockIsAscending: true,\r\n\r\n        }\r\n    }\r\n\r\n    sortName = () => { // default descending\r\n        let products = [...this.props.products] // soft copy of products to manipulate\r\n\r\n        // sort ascending\r\n        if(!this.state.nameIsAscending) {\r\n           let ascendingProducts = products.sort((a, b) => a.name < b.name?1:-1)\r\n            this.props.updateProducts(ascendingProducts)\r\n            console.log(\"Name ACE: \", ascendingProducts)\r\n        // sort descending\r\n        } else {\r\n            let descendingProducts = products.sort((a, b) => a.name < b.name?-1:1)\r\n            this.props.updateProducts(descendingProducts)\r\n            console.log(\"Name DESC: \", descendingProducts)\r\n        }\r\n\r\n        // When the sort is clicked depending on what the previous order was this will set it to its opposite to change the direction of the arrow\r\n        if(!this.state.nameIsAscending) {\r\n            this.setState({nameIsAscending: true})\r\n        } else {\r\n            this.setState({nameIsAscending: false})\r\n        }\r\n\r\n        // reset other arrows to default\r\n        if(!this.state.priceIsAscending || !this.state.stockIsAscending) {\r\n            this.setState({priceIsAscending: true})\r\n            this.setState({stockIsAscending: true})\r\n        }\r\n    }\r\n\r\n    sortPrice = () => { // default ascending\r\n        let products = [...this.props.products]\r\n\r\n        // sort ascending\r\n        if(this.state.priceIsAscending) {\r\n            let ascendingProducts = products.sort((a, b) => a.price < b.price?1:-1)\r\n            this.props.updateProducts(ascendingProducts)\r\n            //console.log(\"Price ACE: \", ascendingProducts)\r\n        // sort descending\r\n        } else {\r\n            let descendingProducts = products.sort((a, b) => a.price < b.price?-1:1)\r\n            this.props.updateProducts(descendingProducts)\r\n            //console.log(\"Price DESC: \",descendingProducts)\r\n        }\r\n       // Update arrow direction\r\n        if(this.state.priceIsAscending) {\r\n            this.setState({priceIsAscending: false})\r\n        } else {\r\n            this.setState({priceIsAscending: true})\r\n        }\r\n\r\n        // reset other arrows to default\r\n        if(!this.state.nameIsAscending || !this.state.stockIsAscending) {\r\n            this.setState({nameIsAscending: true})\r\n            this.setState({stockIsAscending: true})\r\n        }\r\n\r\n    }\r\n    sortStock = () => { // default ascending\r\n        let products = [...this.props.products]\r\n\r\n        // sort ascending\r\n        if(this.state.stockIsAscending) {\r\n            let ascendingProducts = products.sort((a, b) => a.current_stock < b.current_stock?1:-1)\r\n            this.props.updateProducts(ascendingProducts)\r\n            //console.log(\"Stock ACE: \", ascendingProducts)\r\n        // sort descending\r\n        } else {\r\n            let descendingProducts = products.sort((a, b) => a.current_stock < b.current_stock?-1:1)\r\n            this.props.updateProducts(descendingProducts)\r\n            //console.log(\"Stock DESC: \", descendingProducts)\r\n        }\r\n\r\n        // Update arrow direction\r\n        if(this.state.stockIsAscending) {\r\n            this.setState({stockIsAscending: false})\r\n        } else {\r\n            this.setState({stockIsAscending: true})\r\n        }\r\n\r\n        // reset other arrows to default\r\n        if(!this.state.nameIsAscending || !this.state.priceIsAscending) {\r\n            this.setState({nameIsAscending: true})\r\n            this.setState({priceIsAscending: true})\r\n        }\r\n    }\r\n\r\n\r\n    render()\r\n    {\r\n        return (\r\n            <table className=\"admin-table\">\r\n                <thead>\r\n                <tr>\r\n                    <th>Inventory Number</th>\r\n                    <th>Name <label className=\"sortLabel\" onClick={this.sortName}><span id=\"nameSort\">{!this.state.nameIsAscending ? '\\u25B4' : '\\u25BE'} </span></label></th>\r\n                    <th>Brand</th>\r\n                    <th>Category</th>\r\n                    <th>Price <label className=\"sortLabel\" onClick={this.sortPrice}><span id=\"priceSort\">{!this.state.priceIsAscending ? '\\u25B4' : '\\u25BE'}</span></label></th>\r\n                    <th>Stock <label className=\"sortLabel\" onClick={this.sortStock}><span id=\"stockSort\">{!this.state.stockIsAscending ? '\\u25B4' : '\\u25BE'}</span></label></th>\r\n                    <th>P. Code</th>\r\n\r\n                </tr>\r\n                </thead>\r\n\r\n                <tbody>\r\n                    {this.props.products.map((product, index) => (\r\n                        <AdminTableRow\r\n                            key={product._id}\r\n                            product={product}\r\n                            rowNum={index + 1}\r\n                        />\r\n                    ))}\r\n                </tbody>\r\n\r\n            </table>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}